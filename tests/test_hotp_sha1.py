import urllib.parse
import typing

import totp_qrcode_analyzer


def test_sha1():
    secret = b'Some random secret'
    # encoded_secret = base64.b32encode(secret).decode().strip("=")
    encoded_secret = "KNXW2ZJAOJQW4ZDPNUQHGZLDOJSXI"
    issuer = "Testing"
    label = "hotp-sha1-6digits"
    initial_counter = 1234
    hotp = totp_qrcode_analyzer.HOTP(
        secret,
        counter=initial_counter,
        digits=6,
        algorithm="sha1",
        issuer=issuer,
        label=label
    )
    pre_run_uri = urllib.parse.urlparse(hotp.to_uri())
    pre_run_qs = urllib.parse.parse_qs(pre_run_uri.query)
    assert pre_run_uri.scheme == "otpauth"
    assert pre_run_uri.hostname == "hotp"
    assert pre_run_uri.path == f'/{label}'
    assert str(initial_counter) in pre_run_qs.get("counter", [])
    assert encoded_secret in pre_run_qs.get("secret", [])
    assert issuer in pre_run_qs.get("issuer", [])
    assert "SHA1" in pre_run_qs.get("algorithm", [])
    expected_results: typing.List[str] = [
        "084734",
        "683916",
        "284791",
        "499676",
        "597542"
    ] # These data was generated by Google Authenticator
    for result in expected_results:
        assert hotp.get_code() == result

    after_run_uri = urllib.parse.urlparse(hotp.to_uri())
    after_run_qs = urllib.parse.parse_qs(after_run_uri.query)
    assert after_run_uri.scheme == "otpauth"
    assert after_run_uri.hostname == "hotp"
    assert after_run_uri.path == f'/{label}'
    assert (
        str(initial_counter + len(expected_results)) in
        after_run_qs.get("counter", [])
    )
    assert encoded_secret in after_run_qs.get("secret", [])
    assert issuer in after_run_qs.get("issuer", [])
    assert "SHA1" in after_run_qs.get("algorithm", [])
