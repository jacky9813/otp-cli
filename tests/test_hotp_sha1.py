import urllib.parse
import typing
import pathlib

import otp_cli
import otp_cli.images

import conftest


def test_sha1(
    tmp_path: pathlib.Path,
    verifier: conftest.VERIFIER_TYPE
):
    secret = b'Some random secret'
    # encoded_secret = base64.b32encode(secret).decode().strip("=")
    encoded_secret = "KNXW2ZJAOJQW4ZDPNUQHGZLDOJSXI"
    issuer = "Testing"
    label = "hotp-sha1-6digits"
    initial_counter = 1234
    hotp = otp_cli.HOTP(
        secret,
        counter=initial_counter,
        digits=6,
        algorithm="sha1",
        issuer=issuer,
        label=label
    )

    verifier(
        hotp,
        "hotp",
        None,
        encoded_secret,
        initial_counter,
        label,
        issuer,
        "sha1"
    )

    qr_image_filename = tmp_path / "hotp-sha1-6digits.png"
    qr_image = hotp.to_qrcode_image()
    qr_image.save(qr_image_filename)

    expected_results: typing.List[str] = [
        "084734",
        "683916",
        "284791",
        "499676",
        "597542"
    ] # These data was generated by Google Authenticator
    for result in expected_results:
        assert hotp.get_code() == result

    verifier(
        hotp,
        "hotp",
        None,
        encoded_secret,
        initial_counter + len(expected_results),
        label,
        issuer,
        "sha1"
    )

    loaded_hotp = [
        o for o in otp_cli.images.read_image(qr_image_filename)
    ]

    assert len(loaded_hotp) == 1

    verifier(
        loaded_hotp[0],
        "hotp",
        None,
        encoded_secret,
        initial_counter,
        label,
        issuer,
        "sha1"
    )

